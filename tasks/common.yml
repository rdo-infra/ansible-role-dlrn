- name: Include OS-specefic variables
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_facts.distribution }}.{{ ansible_facts.distribution_major_version | default('') }}.yml"
        - "{{ ansible_facts.distribution }}.yml"
        - default.yml
      paths:
        - 'vars'

- name: Ensure EPEL is enabled on CentOS
  ansible.builtin.package:
    name: epel-release
    state: present
  when: ansible_facts.distribution == "CentOS"

- name: Ensure EPEL is enabled on RHEL
  ansible.builtin.command: "dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_facts.distribution_major_version }}.noarch.rpm"
  become: true
  when: ansible_facts.distribution == "RedHat"
  changed_when: false

- name: Install dnf-plugins-core
  ansible.builtin.package:
    name: dnf-plugins-core
    state: present

- name: Enable CRB repo
  ansible.builtin.command: dnf config-manager --enable crb --save
  when: ansible_facts.distribution == "CentOS"
  changed_when: false

- name: Install required packages
  ansible.builtin.package:
    name: "{{ required_packages }}"
    state: present

- name: Install kerberos required packages
  ansible.builtin.package:
    name: "{{ kerberos_required_packages }}"
    state: present
  when: "'KrbAuthentication' in (api_authentication_drivers | default([]))"

- name: Set SELinux to enforcing
  ansible.posix.selinux:
    policy: targeted
    state: enforcing

- name: SELinux configuration
  when:
    - ansible_selinux is defined
    - ansible_selinux.status == 'enabled'
  block:
    - name: Set SELinux booleans
      ansible.posix.seboolean:
        name: "{{ item }}"
        state: true
        persistent: true
      with_items:
        - httpd_read_user_content
        - httpd_enable_homedirs
        - rsync_export_all_ro
        - httpd_can_network_connect
        - daemons_use_tty
        - httpd_unified
        - httpd_execmem
        - httpd_use_nfs

    - name: Allow SSH port access to SELinux
      community.general.seport:
        ports: "{{ sshd_port }}"
        proto: tcp
        setype: ssh_port_t
        state: present

- name: Add SSH port to sshd configuration
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^Port (?!22)'
    line: "Port {{ sshd_port }}"
  notify: Restart sshd

- name: Keep SSH port 22 in sshd configuration
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#Port 22'
    line: "Port 22"
  notify: Restart sshd

- name: Enable firewalld service
  ansible.builtin.service:
    name: firewalld
    state: started
    enabled: true

- name: Add mock group
  ansible.builtin.group:
    name: mock
    state: present

- name: Allow required services through firewall
  ansible.posix.firewalld:
    zone: public
    service: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  with_items:
    - ssh
    - http

- name: Allow custom SSH port through firewall
  ansible.posix.firewalld:
    zone: public
    port: "{{ sshd_port }}/tcp"
    permanent: true
    immediate: true
    state: enabled

- name: Allow HTTPS through firewall
  ansible.posix.firewalld:
    zone: public
    service: https
    permanent: true
    immediate: true
    state: enabled
  when: enable_https

- name: Create /usr/local/share/dlrn directory
  ansible.builtin.file:
    path: /usr/local/share/dlrn
    state: directory
    mode: '0755'

- name: Create the api logs directory
  ansible.builtin.file:
    path: /var/log/dlrn-logs/
    state: directory
    mode: '0755'

- name: Deploy required scripts
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: '0755'
  with_items:
    - run-dlrn.sh
    - run-purge.sh
    - run-user.sh
    - update-deps.sh
    - purge-deps.sh
    - disable-dlrn.sh

- name: Set yum timeout config
  community.general.ini_file:
    path: /etc/yum.conf
    section: main
    option: timeout
    value: '120'
    mode: '0644'

- name: Enable NFS server in builder server
  when:
    - dlrn_server_type | default('server') == 'builder'
    - nfs_shared_repos | default(false)
  block:
    - name: Create trunkinfra firewalld zone
      ansible.posix.firewalld:
        zone: trunkinfra
        permanent: true
        state: present

    - name: Add trunk server to trunkinfra firewalld zone
      ansible.posix.firewalld:
        zone: trunkinfra
        permanent: true
        state: enabled
        source: "{{ ip_trunk_server }}"

    - name: Allow NFS in trunkinfra zone
      ansible.posix.firewalld:
        zone: trunkinfra
        service: "{{ item }}"
        permanent: true
        state: enabled
      with_items:
        - ssh
        - http
        - nfs

    - name: Allow HTTPS in trunkinfra through firewall
      ansible.posix.firewalld:
        zone: trunkinfra
        service: https
        permanent: true
        immediate: true
        state: enabled
      when: enable_https

    - name: Reload firewalld
      ansible.builtin.command: "firewall-cmd --reload"
      changed_when: false

    - name: Disable NFS v3
      community.general.ini_file:
        path: /etc/nfs.conf
        section: nfsd
        option: vers3
        value: 'n'
        mode: '0644'

    - name: Mask nfs v3 only services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: stopped
        masked: true
      with_items:
        - rpc-statd.service
        - rpcbind.service
        - rpcbind.socket

    - name: Disable NFSv4 delegations
      ansible.posix.sysctl:
        name: fs.leases-enable
        value: '0'
        sysctl_set: true
        state: present
      notify: Restart nfs-server

    - name: Enable nfs-server service
      ansible.builtin.systemd_service:
        name: nfs-server
        state: started
        enabled: true

- name: Configure vgdelorean if needed
  when:
    - disk_for_builders is defined
  block:
    - name: Find device
      ansible.builtin.set_fact:
        diskdev: "{{ disk_for_builders.split('/')[2] }}"

    - name: Fail if device does not exist
      ansible.builtin.fail:
        msg: "Device {{ disk_for_builders }} does not exist"
      when: ansible_devices[diskdev] is undefined

    - name: Create vgdelorean
      community.general.lvg:
        vg: vgdelorean
        pvs: "{{ disk_for_builders }}"

    - name: Create vgdelorean/lvol1
      community.general.lvol:
        vg: vgdelorean
        lv: lvol1
        size: 100%VG

    - name: Create file system
      community.general.filesystem:
        dev: /dev/vgdelorean/lvol1
        force: false
        fstype: ext4

    - name: Mount vgdelorean/lvol1 at /home
      ansible.posix.mount:
        path: /home
        src: /dev/vgdelorean/lvol1
        fstype: ext4
        state: mounted
